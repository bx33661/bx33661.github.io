---
import { SITE } from '@/consts'
import type { CollectionEntry } from 'astro:content'

interface Props {
  post: CollectionEntry<'blog'>
}

const { post } = Astro.props

const title = post.data.title || SITE.title
const description = post.data.description || SITE.description
const postUrl = new URL(post.id, SITE.href).toString()
const image = SITE.href + '/image/' + post.id + '.png';
const author = post.data.authors ? post.data.authors.join(', ') : SITE.author
const fullTitle = `${title} - ${SITE.title}`
---

<title>{fullTitle}</title>
<meta name="description" content={description} />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
<meta name="author" content={author} />
<meta name="generator" content="Astro" />
{post?.data.tags && <meta name="keywords" content={post.data.tags.join(', ')} />}

<!-- 百度SEO -->
<meta name="baidu-site-verification" content="codeva-verify" />

<!-- Open Graph 增强 -->
<meta property="og:title" content={fullTitle} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image} />
<meta property="og:image:alt" content={title} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:type" content="article" />
<meta property="og:locale" content={SITE.locale} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:url" content={postUrl} />
<meta property="og:author" content={author} />
<meta property="article:published_time" content={post.data.date.toISOString()} />
<meta property="article:modified_time" content={post.data.date.toISOString()} />
<meta property="article:author" content={author} />
<meta property="article:publisher" content={SITE.title} />
<meta property="article:section" content="技术博客" />

<!-- Twitter Cards 增强 -->
<meta name="twitter:title" content={fullTitle} />
<meta name="twitter:description" content={description} />
<meta property="twitter:image" content={image} />
<meta name="twitter:image:alt" content={title} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content={`@${author}`} />
<meta name="twitter:site" content={`@${SITE.author}`} />

{
  post?.data.tags &&
    post.data.tags.map((tag: string) => {
      return <meta property="article:tag" content={tag} />
    })
}

<!-- 增强的结构化数据 -->
<script type="application/ld+json" is:inline set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "image": {
    "@type": "ImageObject",
    "url": image,
    "width": 1200,
    "height": 630
  },
  "author": {
    "@type": "Person",
    "name": author,
    "url": SITE.href,
    "sameAs": [
      "https://github.com/bx33661",
      "mailto:bx33661@gmail.com"
    ]
  },
  "publisher": {
    "@type": "Organization",
    "name": SITE.title,
    "logo": {
      "@type": "ImageObject",
      "url": new URL("/logo.png", SITE.href).toString(),
      "width": 60,
      "height": 60
    }
  },
  "datePublished": post.data.date.toISOString(),
  "dateModified": post.data.date.toISOString(),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": postUrl
  },
  "keywords": post?.data.tags ? post.data.tags.join(', ') : '',
  "url": postUrl,
  "wordCount": post.body ? post.body.split(' ').length : 0,
  "articleSection": "技术博客",
  "inLanguage": "zh-CN",
  "about": post?.data.tags ? post.data.tags.map(tag => ({
    "@type": "Thing",
    "name": tag
  })) : [],
  "mentions": post?.data.tags ? post.data.tags.map(tag => ({
    "@type": "Thing",
    "name": tag
  })) : []
})} />

<!-- Canonical URL -->
<link rel="canonical" href={postUrl} />

<!-- 预加载关键资源 -->
<link rel="preload" href={image} as="image" />
<link rel="prefetch" href="/blog" />
{post?.data.tags && post.data.tags.map(tag => 
  <link rel="prefetch" href={`/tags/${tag}`} />
)}