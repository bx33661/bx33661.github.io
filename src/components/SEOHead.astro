---
interface Props {
  title?: string
  description?: string
  image?: string
  type?: 'website' | 'article' | 'profile'
  publishedTime?: string
  modifiedTime?: string
  author?: string
  tags?: string[]
  url?: string
  noindex?: boolean
}

const {
  title,
  description,
  image,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  tags = [],
  noindex = false
} = Astro.props

import { SITE, SEO_KEYWORDS, SOCIAL_PROFILES } from '@/config/site'

const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const pageTitle = title ? `${title} | ${SITE.title}` : SITE.title
const pageDescription = description || SITE.description
const imageURL = image ? new URL(image, Astro.site) : new URL('/ogImage.png', Astro.site)

// 结构化数据
const schemaData: any = {
  '@context': 'https://schema.org',
  '@graph': [
    {
      '@type': 'WebSite',
      '@id': `${SITE.href}#website`,
      url: SITE.href,
      name: SITE.title,
      description: SITE.description,
      publisher: {
        '@id': `${SITE.href}#person`
      },
      potentialAction: {
        '@type': 'SearchAction',
        target: {
          '@type': 'EntryPoint',
          urlTemplate: `${SITE.href}/blog?search={search_term_string}`
        },
        'query-input': 'required name=search_term_string'
      }
    },
    {
      '@type': 'Person',
      '@id': `${SITE.href}#person`,
      name: SITE.author,
      url: SITE.href,
      sameAs: Object.values(SOCIAL_PROFILES),
      jobTitle: '网络安全工程师',
      worksFor: {
        '@type': 'Organization',
        name: 'Independent'
      },
      knowsAbout: [
        '网络安全',
        'CTF竞赛',
        '渗透测试',
        'Web安全',
        '应急响应',
        '安全分析'
      ]
    }
  ]
}

// 文章类型的结构化数据
if (type === 'article') {
  schemaData['@graph'].push({
    '@type': 'Article',
    '@id': `${canonicalURL}#article`,
    isPartOf: {
      '@id': `${SITE.href}#website`
    },
    author: {
      '@id': `${SITE.href}#person`
    },
    headline: title,
    description: pageDescription,
    image: imageURL.toString(),
    datePublished: publishedTime,
    dateModified: modifiedTime || publishedTime,
    mainEntityOfPage: {
      '@id': canonicalURL.toString()
    },
    publisher: {
      '@id': `${SITE.href}#person`
    },
    keywords: tags.join(', '),
    articleSection: '技术博客',
    inLanguage: 'zh-CN'
  })
}
---

<!-- 基础 SEO 元数据 -->
<title>{pageTitle}</title>
<meta name="description" content={pageDescription} />
<link rel="canonical" href={canonicalURL} />

<!-- Robots 指令 -->
{noindex ? (
  <meta name="robots" content="noindex, nofollow" />
) : (
  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
)}

<!-- 关键词 -->
<meta name="keywords" content={[...SEO_KEYWORDS, ...tags].join(', ')} />

<!-- Open Graph -->
<meta property="og:type" content={type} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:title" content={pageTitle} />
<meta property="og:description" content={pageDescription} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:image" content={imageURL} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:locale" content="zh_CN" />

{type === 'article' && (
  <>
    <meta property="article:author" content={author || SITE.author} />
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    <meta property="article:section" content="技术博客" />
    {tags.map(tag => <meta property="article:tag" content={tag} />)}
  </>
)}

<!-- Twitter Card -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@bx33661" />
<meta name="twitter:creator" content="@bx33661" />
<meta name="twitter:title" content={pageTitle} />
<meta name="twitter:description" content={pageDescription} />
<meta name="twitter:image" content={imageURL} />

<!-- 结构化数据 -->
<script type="application/ld+json" is:inline set:html={JSON.stringify(schemaData)} />

<!-- 额外的 SEO 优化 -->
<meta name="author" content={author || SITE.author} />
<meta name="publisher" content={SITE.author} />
<meta name="language" content="zh-CN" />
<meta name="geo.region" content="CN" />
<meta name="geo.country" content="China" />

<!-- 页面类型特定的元数据 -->
{type === 'article' && publishedTime && (
  <>
    <meta name="publish_date" property="og:publish_date" content={publishedTime} />
    <meta name="DC.date.issued" content={publishedTime} />
  </>
)}

<!-- 预获取相关资源 -->
<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
<link rel="preconnect" href="https://www.google-analytics.com" crossorigin />

<!-- Hreflang 支持（未来可扩展） -->
<link rel="alternate" hreflang="zh-cn" href={canonicalURL} />
<link rel="alternate" hreflang="x-default" href={canonicalURL} />